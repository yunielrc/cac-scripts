#!/usr/bin/env bash

# Configures three ubuntu servers connected in a straight line with vpn + shadowsocks
# GATEWAY ⇆ MIDDLE-SERVER ⇆ END-SERVER

#
# !!!RUN THE COMMAND BELOW on each server before run this script!!!
# > this allows to run sudo without password
# $  echo "${USER} ALL=NOPASSWD:ALL" | sudo tee /etc/sudoers.d/nopasswd
#

set -euEo pipefail
shopt -s expand_aliases

set -o allexport
. .env
[[ -f .env.local ]] && . .env.local
set +o allexport

readonly ssh_params='-o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
# shellcheck disable=SC2139
alias ssh="ssh ${ssh_params}"
# shellcheck disable=SC2139
alias scp="scp ${ssh_params}"

[[ -d "$TMP_DIR" ]] || mkdir -p "$TMP_DIR"

__snippet_configure_docker_apt() {
  cat <<-SNIPPET_EOF
    ## Configures docker
    [[ -d /etc/systemd/system/docker.service.d ]] ||
      sudo mkdir -p /etc/systemd/system/docker.service.d

    cat <<EOF | sudo tee /etc/systemd/system/docker.service.d/http-proxy.conf
[Service]
Environment="HTTP_PROXY=${PROXY_URL}" "HTTPS_PROXY=${PROXY_URL}" "NO_PROXY=localhost,127.0.0.1"
EOF
    ## Configures apt
    cat <<EOF | sudo tee /etc/apt/apt.conf.d/00proxy
Acquire::https::Proxy "${PROXY_URL}";
EOF
SNIPPET_EOF
}

readonly SNIPPET_CONFIGURE_DOCKER_APT="$(__snippet_configure_docker_apt)"
readonly SNIPPET_INSTALL_APPS='sudo apt install -y bmon net-tools
'

configure_end_server() {
  #
  # Installs and Configures: openvpn server + shadowsocks server
  # shellcheck disable=2087
  ssh "${END_SERVER_USER}@${END_SERVER_IP}" <<-SSHEOF
    set -euEo pipefail

    wget -qO - https://git.io/JT9Gz?=openvpn-shadowsocks-server-linux |
      WORKING_DIR=~/openvpn-shadowsocks-server \
      SS_CLIENT_PORT=1080 \
      SS_PORT="$END_SERVER_SS_PORT" \
      SS_PASSWORD="$END_SERVER_SS_PASSWORD" \
      OPENVPN_CLIENT_NAME="$END_SERVER_OPENVPN_CLIENT_NAME" \
      bash

    # Install apps
    ${SNIPPET_INSTALL_APPS}
SSHEOF
  #
  # Copies end-server.ovpn profile to local
  #
  [[ -f "$END_SERVER_OVPN_PROFILE_LOCAL_PATH" ]] &&
    rm -f "$END_SERVER_OVPN_PROFILE_LOCAL_PATH"

  scp -v "${END_SERVER_USER}@${END_SERVER_IP}:/home/${END_SERVER_USER}/openvpn-shadowsocks-server/${END_SERVER_OPENVPN_CLIENT_NAME}.ovpn" \
    "$END_SERVER_OVPN_PROFILE_LOCAL_PATH"
}

configure_middle_server() {
  #
  # Copies end-server.ovpn profile from local to middle-server
  #
  scp "$END_SERVER_OVPN_PROFILE_LOCAL_PATH" \
    "${MIDDLE_SERVER_USER}@${MIDDLE_SERVER_IP}:/home/${MIDDLE_SERVER_USER}/"
  # shellcheck disable=2087
  ssh "${MIDDLE_SERVER_USER}@${MIDDLE_SERVER_IP}" <<-SSHEOF
    set -euEo pipefail

#     # Allows to run sudo without password
#     export HISTIGNORE='*sudo -S*'
#     echo "${MIDDLE_SERVER_PASSWORD:-}" | sudo -S sudo -s <<SUDOEOF
#     echo "${MIDDLE_SERVER_USER} ALL=NOPASSWD:ALL" > /etc/sudoers.d/nopasswd
# SUDOEOF

    #
    # Configures DNS
    #
    readonly nic="\$(ip r | grep '^default' | cut -d' ' -f5)"
    readonly staticip="\$(ip r | grep "\${nic}.*kernel" | cut -d' ' -f9)"
    readonly gatewayip="\$(ip r | grep '^default' | cut -d' ' -f3)"

    readonly netplan_cfg="/etc/netplan/${MIDDLE_SERVER_NETPLAN}"

    [[ -f "\$netplan_cfg" ]] &&
      sudo cp "\$netplan_cfg" "\${netplan_cfg}.$(printf '%(%Y%m%d%H%M%S)T')"

    cat <<EOF | sudo tee "\$netplan_cfg"
network:
  version: 2
  renderer: networkd
  ethernets:
    \${nic}:
      dhcp4: no
      dhcp6: no
      addresses:
        - \${staticip}/24
      gateway4: \${gatewayip}
      nameservers:
        search:
          - vps.etecsa.cu
        addresses:
          - 1.1.1.1
          - 1.0.0.1
EOF

    #
    # Installs and Configures: openvpn client + shadowsocks client to end-server
    #

    ## Configures end-server.ovpn profile
    cat <<EOF >> ~/"${END_SERVER_OPENVPN_CLIENT_NAME}.ovpn"

# Allows incoming traffic from CU public ip to shadowsocks server
route 152.206.0.0   255.254.0.0      net_gateway
# Avoid traffic leak when the vpn is down
persist-tun
persist-key
# Custom gateways
${MIDDLE_SERVER_OVPN_CLIENT_PROFILE_CUSTOM:-''}
EOF

    ## Configures docker & apt
    ${SNIPPET_CONFIGURE_DOCKER_APT}

    ### The below export allows the docker repo gpg key to be downloaded from https://download.docker.com/linux/ubuntu/gpg
    export https_proxy="$PROXY_URL"
    wget -qO - https://git.io/JT5TG?=openvpn-shadowsocks-client-ubuntu |
      WORKING_DIR=~/openvpn-shadowsocks-client \
      SS_SERVER_IP="$END_SERVER_IP" \
      SS_SERVER_PORT="$END_SERVER_SS_PORT" \
      SS_PASSWORD="$END_SERVER_SS_PASSWORD" \
      SS_PORT=1080 \
      OPENVPN_PROFILE_FILE=~/"${END_SERVER_OPENVPN_CLIENT_NAME}.ovpn" \
      bash
    unset https_proxy

    #
    # Installs and Configures: openvpn server + shadowsocks server for gateway client
    #
    wget -qO - https://git.io/JT9Gz?=openvpn-shadowsocks-server-linux |
      WORKING_DIR=~/openvpn-shadowsocks-server \
      SS_CLIENT_PORT=1080 \
      SS_PORT="$MIDDLE_SERVER_SS_PORT" \
      SS_PASSWORD="$MIDDLE_SERVER_SS_PASSWORD" \
      OPENVPN_CLIENT_NAME="$MIDDLE_SERVER_OPENVPN_CLIENT_NAME" \
      bash

    #
    # Install apps
    #
    ${SNIPPET_INSTALL_APPS}

    #
    # Allows https traffic
    #
    sudo ufw allow https

    #
    # Enables and start openvpn client
    #
    sudo systemctl enable --now openvpn-client@ovpn-ssclient

    #
    # Apply network config changes (dns)
    #
    sudo netplan apply
SSHEOF

  # copies middle-server.ovpn profile to local
  [[ -f "$MIDDLE_SERVER_OVPN_PROFILE_LOCAL_PATH" ]] &&
    rm -f "$MIDDLE_SERVER_OVPN_PROFILE_LOCAL_PATH"

  scp -v "${MIDDLE_SERVER_USER}@${MIDDLE_SERVER_IP}:/home/${MIDDLE_SERVER_USER}/openvpn-shadowsocks-server/${MIDDLE_SERVER_OPENVPN_CLIENT_NAME}.ovpn" \
    "$MIDDLE_SERVER_OVPN_PROFILE_LOCAL_PATH"
}

configure_gateway() {
  #
  # Upload files
  #
  scp -r ./upload/gateway "${GATEWAY_USER}@${GATEWAY_IP}:/tmp"

  #
  # Copies middle-server.ovpn profile from local to gateway
  #
  scp "$MIDDLE_SERVER_OVPN_PROFILE_LOCAL_PATH" \
    "${GATEWAY_USER}@${GATEWAY_IP}:/home/${GATEWAY_USER}/"

  # shellcheck disable=2087
  ssh "${GATEWAY_USER}@${GATEWAY_IP}" <<-SSHEOF
    set -euEo pipefail

#     # Allows to run sudo without password
#     export HISTIGNORE='*sudo -S*'
#     echo "${MIDDLE_SERVER_PASSWORD:-}" | sudo -S sudo -s <<SUDOEOF
#     echo "${MIDDLE_SERVER_USER} ALL=NOPASSWD:ALL" > /etc/sudoers.d/nopasswd
# SUDOEOF

    #
    #  Configures Timezone
    #
    sudo timedatectl set-timezone America/Havana
    sudo timedatectl set-ntp yes

    #
    #  Configures Network
    #
    readonly nic="\$(ip r | grep '^default' | cut -d' ' -f5)"
    readonly netplan_cfg="/etc/netplan/${GATEWAY_NETPLAN:-'00-installer-config.yaml'}"

    [[ -f "\$netplan_cfg" ]] &&
      sudo cp "\$netplan_cfg" "\${netplan_cfg}.$(printf '%(%Y%m%d%H%M%S)T')"

    cat <<EOF | sudo tee "\$netplan_cfg"
network:
  version: 2
  ethernets:
    \${nic}:
      dhcp4: no
      dhcp6: no
      addresses:
        - ${GATEWAY_IP}/24
      gateway4: ${GATEWAY_GATEWAY_IP}
      nameservers:
        addresses: [1.1.1.1]
EOF

    #
    # Installs and Configures: openvpn client + shadowsocks client to middle-server
    #

    ## Configures middle-server.ovpn profile
    cat <<EOF >> ~/"${MIDDLE_SERVER_OPENVPN_CLIENT_NAME}.ovpn"

#
# Allows direct outcoming traffic to CU ip ranges
#
route 41.194.23.160	255.255.255.240	 net_gateway
route 57.74.110.0	255.255.254.0	 net_gateway
route 57.91.32.0	255.255.240.0	 net_gateway
route 152.206.0.0	255.254.0.0	 net_gateway
route 169.158.0.0	255.255.0.0	 net_gateway
route 181.225.224.0	255.255.224.0	 net_gateway
route 190.6.64.0	255.255.224.0	 net_gateway
route 190.15.144.0	255.255.240.0	 net_gateway
route 190.92.112.0	255.255.240.0	 net_gateway
route 190.98.130.0	255.255.255.224	 net_gateway
route 190.107.0.0	255.255.240.0	 net_gateway
route 200.0.16.0	255.255.255.0	 net_gateway
route 200.0.24.0	255.255.252.0	 net_gateway
route 200.5.12.0	255.255.252.0	 net_gateway
route 200.13.144.0	255.255.248.0	 net_gateway
route 200.14.48.0	255.255.248.0	 net_gateway
route 200.55.128.0	255.255.192.0	 net_gateway
route 201.220.192.0	255.255.224.0	 net_gateway
# secure.etecsa.net
route 10.180.0.30      255.255.255.255  net_gateway
# VE ip ranges
route 190.205.96.0        255.255.240.0  net_gateway

# Avoid traffic leak when the vpn is down
# persist-tun
# persist-key

# Custom gateways
${GATEWAY_OVPN_CLIENT_PROFILE_CUSTOM:-''}
EOF

    ## Configures docker & apt
    ${SNIPPET_CONFIGURE_DOCKER_APT}

    ### The below export allows the docker repo gpg key to be downloaded from https://download.docker.com/linux/ubuntu/gpg
    export https_proxy="$PROXY_URL"
    wget -qO - https://git.io/JT5TG?=openvpn-shadowsocks-client-ubuntu |
      WORKING_DIR=~/openvpn-shadowsocks-client \
      SS_SERVER_IP="$MIDDLE_SERVER_IP" \
      SS_SERVER_PORT="$MIDDLE_SERVER_SS_PORT" \
      SS_PASSWORD="$MIDDLE_SERVER_SS_PASSWORD" \
      SS_PORT=1080 \
      OPENVPN_PROFILE_FILE=~/"${MIDDLE_SERVER_OPENVPN_CLIENT_NAME}.ovpn" \
      bash
    unset https_proxy

    #
    # Install apps
    #
    ${SNIPPET_INSTALL_APPS}

    #
    # Install dnsmasq
    #
    (
      cd /tmp/gateway/dnsmasq &&
        bash install
    )

    #
    # Enables ipv4 forwarding
    #
    cat <<EOF | sudo tee /etc/sysctl.d/99-gateway.conf

# Enables packet forwarding for IPv4
net.ipv4.ip_forward=1
EOF
    sudo sysctl --system

    #
    # Enables and start openvpn client service
    #
    sudo systemctl enable --now openvpn-client@ovpn-ssclient

    #
    # Installs vpn gateway iptables
    #
    (
      cd /tmp/gateway/vpn-router-iptable-rules

      cat <<EOF | sudo tee /etc/vpn-router-iptable-rules.env
VRIR_NETWORK=${GATEWAY_NETWORK}
VRIR_INPUT_NIC=\$(ip r | grep '^default' | cut -d' ' -f5)
VRIR_OUTPUT_NIC=tun0
EOF
      bash install
    )

    #
    # Apply network config changes (dns)
    #
    sudo netplan apply
SSHEOF
}

configure_gateway_alpine() {
  #
  # Upload files
  #
  scp -r ./upload/gateway "${GATEWAY_USER}@${GATEWAY_IP}:/tmp"

  #
  # Copies middle-server.ovpn profile from local to gateway
  #
  copy_dir="/home/${GATEWAY_USER}"
  [ "$GATEWAY_USER" = root ] && copy_dir=/root

  scp "$MIDDLE_SERVER_OVPN_PROFILE_LOCAL_PATH" \
    "${GATEWAY_USER}@${GATEWAY_IP}:${copy_dir}"

  # shellcheck disable=2087
  ssh "${GATEWAY_USER}@${GATEWAY_IP}" <<-SSHEOF
    set -euo pipefail

    #
    #  Configures Timezone
    #
    setup-timezone -z America/Havana

    #
    #  Configures Network
    #
    readonly nic="\$(ip r | grep '^default' | cut -d' ' -f5)"
    cat <<-EOF >/etc/network/interfaces
auto lo
iface lo inet loopback

iface \${nic} inet static
  address ${GATEWAY_IP}/24
  gateway ${GATEWAY_GATEWAY_IP}
EOF
    # echo 1.1.1.1 >/etc/resolv.conf

    # For some reason network interface isn't starting at startup
    # adds nic openrc init script
    cat <<-'EOF' >/etc/init.d/nic-start
#!/sbin/openrc-run
# shellcheck disable=SC2034

description="nic start stop service"

readonly nic=eth0

depend() {
  need net
}

start() {
 ebegin "Starting network interface \${nic}"
 ifup "\$nic"
 eend \$?
}

stop() {
 ebegin "Stopping network interface \${nic}"
 ifdown "\$nic"
 eend \$?
}
EOF
    chmod +x /etc/init.d/nic-start
    rc-update add nic-start

    #
    # Installs & configures shadowsocks client (sslocal)
    #

    ## downloads and installs sslocal
    (
      cd "\$(mktemp -d)"
      wget -qO - "\$(wget -qO - 'https://api.github.com/repos/shadowsocks/shadowsocks-rust/releases/latest' | grep -om 1 'https://.*shadowsocks.*x86_64-unknown-linux-musl.tar.xz')" | tar xJf -
      mv sslocal /usr/bin

      wget -qO - "\$(wget -qO - 'https://api.github.com/repos/shadowsocks/v2ray-plugin/releases/latest' | grep -om 1 'https://.*v2ray-plugin-linux-amd64-.*.tar.gz')" | tar xzf -
      mv v2ray-plugin_linux_amd64 /usr/bin/v2ray-plugin

      rm ./*
    )
    ## adds sslocal config
    mkdir /etc/sslocal
    cat <<-'EOF' >/etc/sslocal/config.json
{
  "server": "${MIDDLE_SERVER_IP}",
  "server_port": ${MIDDLE_SERVER_SS_PORT},
  "local_address": "0.0.0.0",
  "local_port": 1080,
  "password": "${MIDDLE_SERVER_SS_PASSWORD}",
  "timeout": 300,
  "method": "aes-256-gcm",
  "plugin": "v2ray-plugin"
}
EOF
    ## adds sslocal openrc init script
    cat <<-'EOF' >/etc/init.d/sslocal
#!/sbin/openrc-run

name="\$SVCNAME"
command="/usr/bin/\$SVCNAME"
command_args='-c /etc/sslocal/config.json'
command_args_background="-d --daemonize-pid /var/run/\${SVCNAME}.pid"
pidfile="/var/run/\${SVCNAME}.pid"

depend() {
  need net
  use nic-start
  after firewall
}
EOF
    chmod +x /etc/init.d/sslocal
    ## adds sslocal service
    rc-update add sslocal

    #
    # Installs & configure openvpn client
    #

    apk add openvpn -U
    modprobe tun
    echo tun >>/etc/modules-load.d/tun.conf
    echo 'net.ipv4.ip_forward=1' >/etc/sysctl.d/99-gateway.conf
    sysctl -p /etc/sysctl.d/99-gateway.conf

    ## adds openvpn-client-sslocal config

    cat <<-'EOF' >>~/"${MIDDLE_SERVER_OPENVPN_CLIENT_NAME}.ovpn"

#
# Allows direct outcoming traffic
#
# CU ip ranges
route 41.194.23.160	255.255.255.240	 net_gateway
route 57.74.110.0	255.255.254.0	 net_gateway
route 57.91.32.0	255.255.240.0	 net_gateway
route 152.206.0.0	255.254.0.0	 net_gateway
route 169.158.0.0	255.255.0.0	 net_gateway
route 181.225.224.0	255.255.224.0	 net_gateway
route 190.6.64.0	255.255.224.0	 net_gateway
route 190.15.144.0	255.255.240.0	 net_gateway
route 190.92.112.0	255.255.240.0	 net_gateway
route 190.98.130.0	255.255.255.224	 net_gateway
route 190.107.0.0	255.255.240.0	 net_gateway
route 200.0.16.0	255.255.255.0	 net_gateway
route 200.0.24.0	255.255.252.0	 net_gateway
route 200.5.12.0	255.255.252.0	 net_gateway
route 200.13.144.0	255.255.248.0	 net_gateway
route 200.14.48.0	255.255.248.0	 net_gateway
route 200.55.128.0	255.255.192.0	 net_gateway
route 201.220.192.0	255.255.224.0	 net_gateway
# VE ip ranges
route 190.205.96.0        255.255.240.0  net_gateway
# secure.etecsa.net
route 10.180.0.30      255.255.255.255  net_gateway

# Avoid traffic leak when the vpn server is down
# persist-tun
# persist-key

# Custom gateways
${GATEWAY_OVPN_CLIENT_PROFILE_CUSTOM:-''}
EOF

    mkdir -p /etc/openvpn/client
    mv ~/"${MIDDLE_SERVER_OPENVPN_CLIENT_NAME}.ovpn" \
      /etc/openvpn/client/openvpn-client-sslocal.conf

    ## adds openvpn-client-sslocal openrc init script
    cat <<-'EOF' >/etc/init.d/openvpn-client-sslocal
#!/sbin/openrc-run

name="\$SVCNAME"
command='/usr/sbin/openvpn'
command_args='--suppress-timestamps --nobind --config /etc/openvpn/client/openvpn-client-sslocal.conf'
command_args_background="--daemon \${SVCNAME} --writepid /var/run/\${SVCNAME}.pid"
pidfile="/var/run/\${SVCNAME}.pid"

depend() {
  need net
  use nic-start
  use sslocal
  after firewall
}
EOF
    chmod +x /etc/init.d/openvpn-client-sslocal
    ## adds openvpn-client-sslocal service
    rc-update add openvpn-client-sslocal

    #
    # Installs apps
    #
    apk add bmon

    #
    # Installs dnsmasq
    #
    apk add dnsmasq

    ## adds dnsmasq config
    cp -v /etc/dnsmasq.conf /etc/dnsmasq.conf.bak
    cat <<-'EOF' >/etc/dnsmasq.conf
cache-size=1000
domain-needed
bogus-priv
log-queries
no-hosts
no-resolv
strict-order
server=1.0.0.1
server=1.1.1.1
# server=/cu/200.55.128.250
# server=/cu/200.55.128.130
server=/cu/181.225.231.110
server=/cu/181.225.231.120
server=/etecsa.net/181.225.231.110
server=/etecsa.net/181.225.231.120
EOF
    dnsmasq --test

    ## adds & start dnsmasq service
    rc-update add dnsmasq

    #
    # Installs vpn gateway iptables
    #
    (
      cd /tmp/gateway/vpn-router-iptable-rules

      cat <<-EOF >/etc/vpn-router-iptable-rules.env
VRIR_NETWORK=${GATEWAY_NETWORK}
VRIR_INPUT_NIC=\$(ip r | grep '^default' | cut -d' ' -f5)
VRIR_OUTPUT_NIC=tun0
EOF
      sh install-alpine
    )

    #
    # Start & Restart services
    #
    rc-service nic-start start
    rc-service dnsmasq start
    rc-service sslocal start
    rc-service openvpn-client-sslocal start
    rc-service vpn-router-iptable-rules start
    # rc-service networking restart
SSHEOF
}

configure_local_pc() {

  type -P virtualbox || {
    echo "VirtualBox ins't installed on this system"
    return 1
  }

  [[ -n "${GATEWAY_VBOX_NAME:-}" ]] || {
    echo 'variable GATEWAY_VBOX_NAME is empty'
    return 1
  }

  # Install gateway virtualbox vm service for autostart
  cat <<-EOF | sudo tee /lib/systemd/system/vbox-vm-start@.service
[Unit]
Description=VirtualBox VM %I
After=network.target vboxdrv.service
Before=runlevel2.target shutdown.target

[Service]
User=${USER}
Group=vboxusers
Type=forking
Restart=no
TimeoutSec=5min
IgnoreSIGPIPE=no
KillMode=process
GuessMainPID=no
RemainAfterExit=yes

ExecStart=/usr/bin/VBoxManage startvm %i --type headless
ExecStop=/usr/bin/VBoxManage controlvm %i acpipowerbutton

[Install]
WantedBy=multi-user.target
EOF
  sudo systemctl enable --now "vbox-vm-start@${GATEWAY_VBOX_NAME}"
}

main() {
  configure_end_server
  configure_middle_server
  configure_gateway_alpine
  [[ -n "${GATEWAY_VBOX_NAME:-}" ]] &&
    configure_local_pc
}

# on_exit() {
#   rm -r "$TMP_DIR"
# }
# trap on_exit INT TERM EXIT

if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
  main "$@"
fi
